============================================ Hello Angular ============================================

Angular Project Structure
    QuickStart
        Step 1: Install the Angular CLI
            npm install -g @angular/cli
        Step 2: Create a workspace and initial application
            ng new projectOne
                Would you like to add Angular routing? No
                CSS
        Step 3: Run the application
            cd projectOne
            ng serve --open
        Xem nội dung:
            angular\projectOne\src\app
                app.component.ts
                app.module.ts
                app.component.html
            angular\projectOne\src
                main.ts
                index.html
                styles.css
    Customize

Component Metadata 
    Selector
    Template
    TemplateURL
    Style, StyleURL

============================================ Template Setting ============================================

Multiple Components
    @Component({
        selector: 'my-study-multi-abc',
        template: '<h1>Study Multi ABC</h1>'
    })    
        @: Decorator indicator
        Component: Decorator name 
        (): Argument

Attribute
    Interpolation
    Class - Style
    Event binding
        using jquery in angular
            declare var jQuery:any;
    Two way binding

Built-in directives
    NgIF
    NgFor
    NgSwitch
    NgClass
    NgStyle

Setting Template
    Content & Template
    Custom template
    Optimized

============================================ Setting Color ============================================

Template reference variables

Sử dụng @Input và @Output
    Input
    Output

Template tag

Project 03: Setting Color
    Setting Color 01
    Setting Color 02
    Setting Color 03

============================================ List Course with Pipe & Custom Pipe ============================================

Sử dụng Pipe cơ bản
    Lowercase - Uppercase
    Slice
    Decimal
    Percent
    Currency
    Date
    Json

Xây dựng Pipe với PipeTransform
    Capitalize
    Array
    Summary
    Category

List Course with Pipe & Custom Pipe
    Project - Control
        1. @types/node をインストール
            npm install --save @types/node
        2. tsconfig.json に以下を記述
            "compilerOptions": {
                "types": ["node"]
            }
        3. src/tsconfig.app.json にも、同じく記述
            "compilerOptions": {
                "types": ["node"]
            }
        <img src="../assets/course/c01.jpg" alt="...">
    Data sample
    List Courses
    Setting 01
    Setting 02
    CourseCapitalizePipe
    CourseSummaryPipe
    CourseCategoryPipe
    CoursePricePipe

============================================ Expand and collapse content ============================================

Init
    Step 1: Install the Angular CLI
        npm install -g @angular/cli
    Step 2: Create a workspace and initial application
        ng new projectOne
            Would you like to add Angular routing? No
            CSS
    Step 3: Run the application
        cd projectFive
        ng serve --open
    An unhandled exception occurred: Port 4200 is already in use. Use '--port' to specify a different port
        ng serve --open --port 4201

index.html
    <!-- Bootstrap -->
    <link href="assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="assets/css/styles.css" rel="stylesheet" >
	<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="assets/js/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="assets/js/bootstrap.min.js"></script>

HightLight Plugin
    Attribute Directive
    HostListener
    Param 1
    Param 2

Collapsed Plugin
    Is-collapsed
    Collapsed - expand
    ExportAs
    Span

============================================ Tab Container ============================================

Init
    Step 1: Install the Angular CLI
        npm install -g @angular/cli
    Step 2: Create a workspace and initial application
        ng new projectSix
            Would you like to add Angular routing? No
            CSS
    Step 3: Run the application
        cd projectSix
        ng serve --openng serve --open
    An unhandled exception occurred: Port 4200 is already in use. Use '--port' to specify a different port
        ng serve --open --port 4201
    moduleId: module.id(Khong can)

Structural Directive

Unless Directive
    Unless 1
    Unless 2

Delay Directive
    Delay

Xây dựng plugin với Structural Directive 
    Init
    SelectorDirective
    ContainDirective
    TabDirective
    Viết show method
    Structural Directive

============================================ View video programming on Youtube ============================================

Init
    Step 1: Install the Angular CLI
        npm install -g @angular/cli
    Step 2: Create a workspace and initial application
        ng new projectSix
            Would you like to add Angular routing? No
            CSS
    Step 3: Run the application
        cd projectSix
        ng serve --open
    An unhandled exception occurred: Port 4200 is already in use. Use '--port' to specify a different port
        ng serve --open --port 4201
    moduleId: module.id(Khong can)

Augury
LifeCycle Hooks
    LifeCycle hook
        Lập trình viên có thể dựa vào các hook trong LifeCycle để đưa ra các xử lý phù hợp
        Hook -> Interface -> hook method
        Thứ tự:
            ngOnInit
            ngDoCheck
            ngAfterContentInit
            ngAfterContentChecked
            ngAfterViewInit
            ngAfterViewChecked
            ngDoCheck
            ngAfterContentChecked
            ngAfterViewChecked
    OnInit - OnDestroy
        ngOnInit dùng khi khởi tạo các giá trị như thiết lập các giá trị trong một mảng nào đó...
        ngOnDestroy dùng khi clean
        Constructor nó được gọi đầu tiên trước tất cả các LifeCycle Hooks và nó thường tiêm vào các DI, tuy nhiên
            Constructor không phải là 1 hook nằm trong LifeCycle
    OnChanges 01
    OnChanges 02
    Ng-content 01
    Ng-content 02
    AfterContent 01
        ngAfterViewChecked(): Called after the ngAfterViewInit() and every subsequent. Khi có sự thay đổi thì sẽ được gọi
        ngAfterViewInit(): Called once after the first ngAfterContentChecked(). Nó chỉ được gọi một lần
        AfterContent -> thì sẽ thao tác với phần ng-content -> Sử dụng đến ContentChild để thao tác
        AfterView -> template -> Sử dụng ViewChild để thao tác
    AfterContent 02
    AfterView

Service & Dependency Injection
    DI 01
        Dependency Injection(DI) giúp giảm sự phụ thuộc giữa các lớp, tạo ra sự linh hoạt cao và tính dễ bảo trì cho ứng dụng
        Lợi ích khi sử DI: Giảm sự phụ thuộc giữa các class, tăng khả năng dùng lại và khả năng dễ đọc của mã nguồn, tạo cho ứng 
            dụng tính mềm dẻo và khả năng nâng cấp bảo trì trở nên đơn giản và nhanh chóng hơn
    DI 02
    LogService 01
    LogService 02
        providers: Khai báo để các thể hiện của Service nằm trong các component con nó cùng là 1 Service
        Khi ở component cha đã khai báo provider rồi thì ở trong các component con không cần khai báo provider đó nữa và trong các      
            component con nó có thể dùng chung provider đó
    CaculatorService - Init
        ng new projectSeven2
            Would you like to add Angular routing? No
            CSS
        cd projectSeven2
            ng serve --open
    CaculatorService
    CourseService

View video programming on Youtube
    YoutubeComponent
    Outline & Player
    Video Service
    Player Component
        unsafe value used in a resource URL context
    Outline Component
    Change video
    Change seen
    CookieService 01
        npm
        ng-cookie(Simple cookie service for AngularJS)
        npm i ng-cookies
        npm uninstall ng-cookies
        angular cookieservice
        angular-cookie
        npm install ngx-cookie-service
    CookieService 02
        set(), get(), delete()
    Save videoids
    Sync
    AddHistory
    RemoveHistory
    Youtube Package
        https://www.npmjs.com/package/@angular/youtube-player
        https://medium.com/angular-in-depth/the-new-angular-youtube-player-component-9ce52ecf3dee
        npm i @angular/youtube-player
    Service
        Không sử dụng Input và Output
        ngAfterContentChecked()

============================================ Router Master ============================================

Exercise 1: Home - About - Contact 
    Init
        ng new projectEight
        Có tạo router
        cd projectEight
        ng serve --open
    Home About Contact
        Routing & Navigation
        live example / download example.
        Khi muốn sử dụng router thì phải thêm <base href="/"> vào tập tin chạy chính index.html
        Cấu hình của Router
        Phần hiển thị các trang: <router-outlet></router-outlet>
    NotFound
    RouterLink
    RouterLinkActive
    Navigate
    RouterLinkActiveOptions
        [routerLinkActiveOptions]="{ exact: true }"
        Tránh trường hợp khi vào thằng con thì thằng cha nó cũng bị active

Exercise 2: Manage Course - List Info - Part 1
    Structure
        Injectable: Import vào cho Service
        Service thì phải đăng ký providers
            providers: [CourseService],
    Router setting
        Thứ tự khai báo router rất quan trọng, router nào càng chi tiết thì khai báo trên, chung chung thì khai báo sau
    Create link
        <a [routerLink]="['/course', 'C01']"> truyền tham số thứ 2 cho routerLink
    Course Detail
        ActivatedRoute
    CanActivate
        Cơ chế bảo mật(gard)
    Angular Modules 01
--------Angular Modules(note)
            -------------------------------------------------------------
            An Angular module is a class decorated with @NgModule metadata:
            + declarations: 
                components, directives and pipes (belong to one and only one Angular module)
            + imports  
                module, components, directives and pipes (if needed)
                BrowserModule, the module every browser app must import (NgIf and 
                NgFor)
                    NgIf is declared in CommonModule from @angular/common
                    BrowserModule imports CommonModule
            + providers: services
            + exports
                Export/Reexport module, components, directives and pipes 
                Nevert export a service
            bootstrap:	[ AppComponent ]  identifies this AppComponent as the bootstrap component.
            -------------------------------------------------------------
            Every Angular app has at least one module class, the root module. We bootstrap that module to launch the application.
            AppModule - the application root module - app.module.ts.
            -------------------------------------------------------------
            Bootstrap trong main.ts
            Feature Module
            Share Module
    Angular Modules 02
        Khi xây dựng 1 ứng dụng thì ứng dụng đó có thể được xây dựng từ nhiều Module khác nhau
        Một Module thì có thể phụ thuộc vào nhiều Module khác
    Angular Modules 03
        CommonModule: NgIf is declared in CommonModule from @angular/common
        Cấu hình Routing
        Cấu hình routing chung cho toàn bộ ứng dụng: forRoot()
        Đối với các module con thì dùng forChild()
        app.module.ts: AppRoutingModule được import sau cùng
          imports: [
                BrowserModule,
                CourseModule,
                AppRoutingModule
            ]
        Feature Module: Là 1 module chức năng nào đó nó thực hiện 1 công việc cụ thể
    Angular Modules 04
        Share Module: Chia sẻ giữa các Module với nhau
    
Exercise 3: Manage Course - List Info - Part 2
    Prepare
    NavigateByUrl
    Subscription
        Khi sử dụng snapshot thì khi Component được tái sử dụng thì nội dung không được cập nhật lại
        Subscription sẽ thực hiện lắng nghe sự thay đổi
        Khi Component sử dụng Subscription không còn sử dụng nữa thì thì không cần phải lắng nghe các sự thay đổi -> dùng 
            OnDestroy để unsubscribe(), nếu không thì có thể sẽ làm tốc độ dự án chậm lại
    QueryParams
    CanDeActivate
        CanActivate: Không cho người dùng truy cập vào
        CanDeActivate: Từ 1 router nào đó thì người dùng có thể thiết lập để người dùng đó có thể ra khỏi router đó hay không.
            Mà người dùng có thể thoát khỏi router đó khi có 1 điều kiện nào đó

Exercise 4: Manage Course - Edit Delete
    ChildRouter 01
    ChildRouter 02
        course/2/edit 	    Edit 	EditComponent
        course/2			Detail	DetailComponent
        course/2/detail	    Detail	DetailComponent
        course/2/delete 	Delete 	DeleteComponent

        course + id + " "		Detail	DetailComponent
        course + id + "detail"	Detail	DetailComponent
        course + id + "edit"	Edit	EditComponent
        course + id + "delete"	Delete	DeleteComponent
    ChildRouter 03
    ChildRouter Param

Exercise 5: Widget Dasboard
    Required
    Multi router
        Load và xóa phần outlet phụ
    Widget Dasboard 01
        [NgClass] ---> ng-class
                       className
    Widget Dasboard 02
    
============================================ Demo Something ============================================

Init
    ng new demo
    Có tạo router
    cd demo
    ng serve --open
Class Binding
    [class.glyphicon-th-list]="isList"
NgClass
    [ngClass]="{
        'glyphicon-th': !isList,
        'glyphicon-th-list': isList
    }"

============================================ HTTP ============================================

Study HTTP
    Mockapi.com
        mockapi
            http://mockapi.io/
            Đăng nhập bằng tài khoản google(gmail)
            Tạo mới Project:
                name: Study HTTP
                prefix: /api/angular/v1
            Create resource
                name: courses
                Fields: 
                    id: Object ID 
                    name: string 
                    description: string
            Kiểm tra: https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses
            Docs: ~
        Postman: Là 1 Extension của trình duyệt Chrome
            chrome://apps/
                username: vudinhquangk53
                pwd:
            test: 
                GET: https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses
                GET	1 phần tử: 
                    https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses/5
                POST: Thêm phần tử mới
                POST: https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses
                    id tự động tăng nên không cần truyền
                    Headers:
                        Content-Type: application/json
                    Body(raw): JSON(application)
                        {
                            "name": "name 69",
                            "description": "description 69"
                        }
                PUT: Cập nhật lại 1 đối tượng nào đó
                PUT: https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses/1
                    {
                        "id": 1,
                        "name": "name 169",
                        "description": "description 169"
                    }
                DELETE: Xóa 1 phần tử
                DELETE: https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses/11
    Observable & Promise
        Thường được sử dụng trong việc khi thao tác các hành động thuộc về async(Các tao tác bất đồng bộ)
        Observable: Là 1 array dùng để lưu trữ các giá trị bất đồng bộ vào tất cả các thời điểm
            Là 1 thành phần nằm trong ES7, nên muốn sử dụng được thì phải import vào phần thư viện Reactive Extensions (RxJS).
    Init và thêm css, js...
        ng new projectNine
            Would you like to add Angular routing? (y/N)
            (Có tạo router)
        cd projectNine
        ng serve --open
    Prepare
    GetItems 01
        Before you can use HttpClient, you need to import the Angular HttpClientModule. Most apps do so in the root AppModule.
        JSON format Extension
        GET: https://5eb03afce6828200164a68aa.mockapi.io/api/angular/v1/courses
    GetItems 02
    GetItems 03
    GetItem
    DeleteItem

Github API
    Prepare
        [(ngModel)]="username" -> Giá trị username sẽ thay đổi khi giá trị trong ô Input thay đổi
        ngModel 
        FormsModule
        Khi sử dụng đến ngModel thì cần phải imports thêm FormsModule
    Profile
        Github api
        https://developer.github.com/v3/
        https://api.github.com Tất cả các dữ liệu sẽ được gửi và nhận dưới dạng JSON
        Lấy thông tin user:
            https://api.github.com/users/:username
    Repository
    Rate Limiting
        Nếu sử dụng Basic Authentication or OAuth thì có thể 5000 request trong 1 giờ, còn không thì chỉ được 60 request
        Github -> Setting -> Developer settings -> OAuth Apps -> Register a new application
            Application name: githu api
            Homepage URL: http://localhost:4200/
            Application description: Github api Test
            Authorization callback URL: http://localhost:4200/
        Sau khi đăng ký xong ta có Client ID và Client Secret

Spotify API 
    Intro
        Spotify là 1 music service cung cấp hàng triệu bài hát mình có thể nghe
    Prepare
        Luồng đi: SearchComponent -> ArtistComponent -> AlbumComponent
    Search
        Spotify api
        https://developer.spotify.com/documentation/web-api/
        Docs -> Web API -> Reference
        Base URL: https://api.spotify.com/v1
        Search: https://api.spotify.com/v1/search
        Tham số bắt buộc: q, type
        q: Giá trị muốn tìm kiếm
        type: album , artist, playlist, track, show...
        Spotify Docs -> Guides -> App Setting
            Login(gmail, 54)
        Client ID a9603bfb11e242bf8e81426311efa095
        Client Secret 75f88d806ee241d7b3ebbd463c9cda03 
        EDIT SETTINGS
            Redirect URIs: http://localhost:8888/callback/
		https://github.com/spotify/web-api-auth-examples
			npm install
			cd authorization_code
			app.js:
				var client_id = 'CLIENT_ID'; // Your client id
				var client_secret = 'CLIENT_SECRET'; // Your secret
				var redirect_uri = 'REDIRECT_URI'; // Your redirect uri
					http://localhost:8888/callback/
			node app.js
		Mở trang http://localhost:8888/ thì thu được Access token
			Sử dụng giá trị này để gọi API gửi đến Spotify thì thu được kết quả
